<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://58.2.221.69:3306/ambari?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true" />
		<property name="username" value="ambari" />
		<property name="password" value="ambari" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
	<!-- demo 1 start -->
	<!--  	<bean id="processEngineConfiguration" class="org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		false（默认）：检查数据库表的版本和依赖库的版本， 如果版本不匹配就抛出异常。
			true: 构建流程引擎时，执行检查，如果需要就执行更新。 如果表不存在，就创建。
			create-drop: 构建流程引擎时创建数据库表， 关闭流程引擎时删除这些表。 
		<property name="databaseSchemaUpdate" value="true" />
		只有启用job执行器之后，定时器才会被触发。  （activiti.cfg.xml中的jobExecutorActivate需要设置为true， 不过，默认job执行器是关闭的）。
		<property name="jobExecutorActivate" value="false" />
	</bean> 
	 -->
	<!-- demo 1 end -->

	<!--demo 2 start -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="true" />
		<property name="jobExecutorActivate" value="false" />


	<!--为了定制发布方式，你可以为SpringProcessEngineConfiguration指定一个额外的参数deploymentMode。
		 这个参数指定了匹配多个资源时的发布处理方式。默认下这个参数支持设置三个值：
		default: 把所有资源放在一个单独的发布包中，  对这个发布包进行重复检测。 这是默认值，如果你没有指定参数值，就会使用它。 
		single-resource: 为每个单独的资源创建一个发布包， 并对这些发布包进行重复检测。 你可以单独发布每个流程定义，并在修改流程定义后只创建一个新的流程定义版本。 
		resource-parent-folder: 把放在同一个上级目录下的资源发布在一个单独的发布包中，并对发布包进行重复检测。 当需要多资源需要创建发布包，但是需要根据共同的文件夹来组合一些资源时，可以使用它。 -->
		
		<!-- <property name="deploymentResources" value="classpath*:/activiti/*.bpmn" /> -->
  		<!-- <property name="deploymentMode" value="single-resource" /> -->
	</bean>

	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	
	

	<!--demo 2 end -->
</beans>